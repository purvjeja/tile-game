{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/tile-puzzle-second/src/tile-puzzle.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./tile-puzzle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TileGame() {\n  _s();\n\n  const shuffle = () => {\n    let array = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n    let top = array.length;\n    let current, temp;\n\n    while (--top) {\n      current = parseInt(Math.random() * (top + 1));\n      temp = array[top];\n      array[top] = array[current];\n      array[current] = temp;\n    }\n\n    return array;\n  };\n\n  let [arrayOfNumbers, setArrayOfNumbers] = useState(shuffle);\n  let [emptyBoxPosition, setEmptyBoxPosition] = useState(arrayOfNumbers.indexOf(0));\n  let [moveCount, setMoveCount] = useState(0);\n\n  const CreateBox = props => {\n    console.log(props.item);\n    const className = props.item === 0 ? \"zeroBox\" : \"boxes\"; // (emptyBoxPosition === arrayOfNumber.length - 1) ? \"\" : 3\n\n    const content = props.item === 0 ? emptyBoxPosition + 1 : props.item;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: className,\n      id: props.item,\n      onClick: () => swap(props.item),\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this);\n  };\n\n  const swap = id => {\n    // alert(id);\n    // console.log(emptyBoxPosition%3 !== 1);\n    const checkColumnAdjacent = Math.abs(arrayOfNumbers.indexOf(id) + 1 - (emptyBoxPosition + 1)) === 3;\n    const checkRowAdjacentLeft = Math.abs(arrayOfNumbers.indexOf(id) + 1 - (emptyBoxPosition + 1)) === 1 && emptyBoxPosition % 3 !== 0 && (emptyBoxPosition - 1) % 3 !== 2;\n    const checkRowAdjacentRight = Math.abs(arrayOfNumbers.indexOf(id) + 1 - (emptyBoxPosition + 1)) === 1 && emptyBoxPosition % 3 !== 2 && (emptyBoxPosition - 1) % 3 !== 0;\n\n    if (checkColumnAdjacent || checkRowAdjacentLeft || checkRowAdjacentRight) {\n      let tempArray = arrayOfNumbers;\n      id = tempArray.indexOf(id);\n      let temp = tempArray[id];\n      tempArray[id] = tempArray[emptyBoxPosition];\n      tempArray[emptyBoxPosition] = temp;\n      setArrayOfNumbers(tempArray);\n      setEmptyBoxPosition(id);\n      setMoveCount(moveCount + 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"renderArea\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Moves : \", moveCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainBox\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"boxWithBoxes\",\n        className: \"innerBox\",\n        children: arrayOfNumbers.map(number => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(CreateBox, {\n            item: number\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 68\n          }, this)\n        }, number, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 49\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TileGame, \"6glUz3PX7zc0SJzn5T9W8DzrCfQ=\");\n\n_c = TileGame;\nexport default TileGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"TileGame\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/tile-puzzle-second/src/tile-puzzle.js"],"names":["React","useState","TileGame","shuffle","array","top","length","current","temp","parseInt","Math","random","arrayOfNumbers","setArrayOfNumbers","emptyBoxPosition","setEmptyBoxPosition","indexOf","moveCount","setMoveCount","CreateBox","props","console","log","item","className","content","swap","id","checkColumnAdjacent","abs","checkRowAdjacentLeft","checkRowAdjacentRight","tempArray","map","number"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport \"./tile-puzzle.css\";\nfunction TileGame() {\n    const shuffle = () => {\n        let array = [0,1,2,3,4,5,6,7,8];\n        let top = array.length; \n        let current,temp;\n        while(--top) {\n          current = parseInt(Math.random() * (top+1));\n          temp = array[top];\n          array[top] = array[current];\n          array[current] = temp;\n        }\n        return array;\n      }\n  \n    let [arrayOfNumbers,setArrayOfNumbers] = useState(shuffle); \n    let [emptyBoxPosition,setEmptyBoxPosition] = useState(arrayOfNumbers.indexOf(0));\n    let [moveCount,setMoveCount] = useState(0);\n\n    const CreateBox = (props) => {\n        console.log(props.item);\n        const className = (props.item === 0) ? \"zeroBox\" : \"boxes\" ;   \n        // (emptyBoxPosition === arrayOfNumber.length - 1) ? \"\" : 3\n        const content = (props.item === 0 ) ? emptyBoxPosition + 1 : props.item;\n        return(\n            <div className={className} id={props.item}  onClick={() => swap(props.item)}>\n               {content}\n           </div>\n        )\n    }\n\n    const swap = (id) => {\n      // alert(id);\n      // console.log(emptyBoxPosition%3 !== 1);\n      const checkColumnAdjacent = (Math.abs((arrayOfNumbers.indexOf(id) + 1) - (emptyBoxPosition + 1)) === 3);\n      const checkRowAdjacentLeft = ((Math.abs((arrayOfNumbers.indexOf(id) + 1) - (emptyBoxPosition + 1)) === 1) && (emptyBoxPosition%3 !== 0 && (emptyBoxPosition-1)%3 !== 2));\n      const checkRowAdjacentRight = ((Math.abs((arrayOfNumbers.indexOf(id) + 1) - (emptyBoxPosition + 1)) === 1) && (emptyBoxPosition%3 !== 2 && (emptyBoxPosition-1)%3 !== 0));\n\n\n      if(checkColumnAdjacent || checkRowAdjacentLeft || checkRowAdjacentRight) {\n        \n        let tempArray = arrayOfNumbers;\n        id = tempArray.indexOf(id);\n        let temp = tempArray[id];\n        tempArray[id] = tempArray[emptyBoxPosition];\n        tempArray[emptyBoxPosition] = temp;\n        \n        setArrayOfNumbers(tempArray);\n        setEmptyBoxPosition(id);\n        setMoveCount(moveCount + 1);\n      }\n    }\n\n    return (\n    <div className=\"renderArea\">\n      <h1>Moves : {moveCount}</h1>\n        <div className=\"mainBox\">\n            <div id=\"boxWithBoxes\" className=\"innerBox\">\n                {arrayOfNumbers.map((number) => <div key={number} ><CreateBox item={number} /></div>)}             \n            </div>\n        </div>\n    </div>\n  );\n\n}\n\nexport default TileGame;\n"]},"metadata":{},"sourceType":"module"}