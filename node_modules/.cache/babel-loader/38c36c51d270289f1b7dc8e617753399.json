{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/tile-puzzle-second/src/tile-puzzle.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./tile-puzzle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TileGame() {\n  _s();\n\n  const shuffle = () => {\n    let array = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n    let top = array.length;\n    let current, temp;\n\n    while (--top) {\n      current = parseInt(Math.random() * (top + 1));\n      temp = array[top];\n      array[top] = array[current];\n      array[current] = temp;\n    }\n\n    return array;\n  };\n\n  let [arrayOfNumbers, setArrayOfNumbers] = useState(shuffle);\n  let [emptyBoxPosition, setEmptyBoxPosition] = useState(arrayOfNumbers.indexOf(0));\n  let [moveCount, setMoveCount] = useState(0);\n\n  const checkWin = () => {\n    if (JSON.stringify(arrayOfNumbers) === JSON.stringify([1, 2, 3, 4, 5, 6, 7, 8, 0])) {\n      alert(`Voila, You finished the game in ${moveCount} Moves!`);\n      setTimeout(() => window.location.reload(), 4000);\n    }\n  };\n\n  const CreateBox = props => {\n    const className = props.item === 0 ? \"zeroBox\" : \"boxes\";\n    const content = props.item === 0 ? emptyBoxPosition + 1 : props.item;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: className,\n      id: props.item,\n      onClick: () => swap(props.item),\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this);\n  };\n\n  const Time = () => {\n    let time = 0;\n    setInterval(() => time++, 1000);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this);\n  };\n\n  const swap = id => {\n    const boxToSwapWith = arrayOfNumbers.indexOf(id);\n    const checkColumnAdjacent = Math.abs(boxToSwapWith - emptyBoxPosition) === 3; // for columns\n\n    const checkRowAdjacentRight = boxToSwapWith - emptyBoxPosition === 1 && boxToSwapWith % 3 !== 0 ? true : false; // for row right\n\n    const checkRowAdjacentLeft = boxToSwapWith - emptyBoxPosition === -1 && boxToSwapWith % 3 !== 2 ? true : false; // for row left\n\n    if (checkColumnAdjacent || checkRowAdjacentLeft || checkRowAdjacentRight) {\n      let tempArray = arrayOfNumbers; // swap method\n\n      let temp = tempArray[boxToSwapWith];\n      tempArray[boxToSwapWith] = tempArray[emptyBoxPosition];\n      tempArray[emptyBoxPosition] = temp; //setting state\n\n      setEmptyBoxPosition(boxToSwapWith);\n      setMoveCount(moveCount + 1);\n      setArrayOfNumbers(tempArray);\n    }\n  };\n\n  checkWin();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"renderArea\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Moves : \", moveCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: /*#__PURE__*/_jsxDEV(Time, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainBox\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"boxWithBoxes\",\n        className: \"innerBox\",\n        children: arrayOfNumbers.map(number => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(CreateBox, {\n            item: number\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 68\n          }, this)\n        }, number, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 49\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TileGame, \"6glUz3PX7zc0SJzn5T9W8DzrCfQ=\");\n\n_c = TileGame;\nexport default TileGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"TileGame\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/tile-puzzle-second/src/tile-puzzle.js"],"names":["React","useState","TileGame","shuffle","array","top","length","current","temp","parseInt","Math","random","arrayOfNumbers","setArrayOfNumbers","emptyBoxPosition","setEmptyBoxPosition","indexOf","moveCount","setMoveCount","checkWin","JSON","stringify","alert","setTimeout","window","location","reload","CreateBox","props","className","item","content","swap","Time","time","setInterval","id","boxToSwapWith","checkColumnAdjacent","abs","checkRowAdjacentRight","checkRowAdjacentLeft","tempArray","map","number"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport \"./tile-puzzle.css\";\nfunction TileGame() {\n    const shuffle = () => {\n        let array = [0,1,2,3,4,5,6,7,8];\n        let top = array.length; \n        let current,temp;\n        while(--top) {\n          current = parseInt(Math.random() * (top+1));\n          temp = array[top];\n          array[top] = array[current];\n          array[current] = temp;\n        }\n        return array;\n      }\n  \n    let [arrayOfNumbers,setArrayOfNumbers] = useState(shuffle); \n    let [emptyBoxPosition,setEmptyBoxPosition] = useState(arrayOfNumbers.indexOf(0));\n    let [moveCount,setMoveCount] = useState(0);\n\n    \n    const checkWin = () => {\n      if(JSON.stringify(arrayOfNumbers) === JSON.stringify([1,2,3,4,5,6,7,8,0])) {\n          alert(`Voila, You finished the game in ${moveCount} Moves!`);\n          setTimeout(() => window.location.reload(), 4000);\n      }\n    }\n    const CreateBox = (props) => {\n        const className = (props.item === 0) ? \"zeroBox\" : \"boxes\" ;   \n        const content = (props.item === 0 ) ? emptyBoxPosition + 1 : props.item;\n        return(\n            <div className={className} id={props.item}  onClick={() => swap(props.item)}>\n               {content}\n           </div>\n        )\n    }\n    const Time = () => {\n      let time = 0;\n      setInterval(() => time++, 1000);\n      return (\n        <div>{time}</div>\n      )\n    }\n\n    const swap = (id) => {\n\n      const boxToSwapWith = arrayOfNumbers.indexOf(id);\n      \n      const checkColumnAdjacent = (Math.abs(boxToSwapWith - emptyBoxPosition) === 3);                                         // for columns\n      const checkRowAdjacentRight = ((boxToSwapWith - emptyBoxPosition === 1) && (boxToSwapWith%3 !== 0)) ?  true : false;    // for row right\n      const checkRowAdjacentLeft = ((boxToSwapWith - emptyBoxPosition === -1) && (boxToSwapWith%3 !== 2)) ? true : false;     // for row left\n\n      if(checkColumnAdjacent || checkRowAdjacentLeft || checkRowAdjacentRight) {\n        \n        let tempArray = arrayOfNumbers\n\n        // swap method\n        let temp = tempArray[boxToSwapWith];\n        tempArray[boxToSwapWith] = tempArray[emptyBoxPosition];\n        tempArray[emptyBoxPosition] = temp;\n        \n        //setting state\n        setEmptyBoxPosition(boxToSwapWith);\n        setMoveCount(moveCount + 1);\n        setArrayOfNumbers(tempArray);\n      }\n    }\n    checkWin();\n    return (\n    <div className=\"renderArea\">\n      <div>\n        <div><h1>Moves : {moveCount}</h1></div>\n        <div><h1><Time /></h1></div>\n      </div>\n        <div className=\"mainBox\">\n            <div id=\"boxWithBoxes\" className=\"innerBox\">\n                {arrayOfNumbers.map((number) => <div key={number} ><CreateBox item={number} /></div>)}      \n            </div>\n        </div>\n    </div>\n  );\n}\n\n\nexport default TileGame;"]},"metadata":{},"sourceType":"module"}