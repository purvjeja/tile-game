{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/tile-puzzle-second/src/tile-puzzle.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./tile-puzzle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TileGame() {\n  _s();\n\n  const shuffle = () => {\n    let array = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n    let top = array.length;\n    let current, temp;\n\n    while (--top) {\n      current = parseInt(Math.random() * (top + 1));\n      temp = array[top];\n      array[top] = array[current];\n      array[current] = temp;\n    }\n\n    return array;\n  };\n\n  let [arrayOfNumbers, setArrayOfNumbers] = useState([1, 2, 3, 4, 5, 6, 7, 0, 8]);\n  let [emptyBoxPosition, setEmptyBoxPosition] = useState(arrayOfNumbers.indexOf(0));\n  let [moveCount, setMoveCount] = useState(0);\n  let [StartTime, setStartTime] = useState(0); // let [handleGameTimeData,setHandleGameTimeData] = useState({currentTime : 0, isNowNeeded : false});\n\n  useEffect(() => {\n    if (moveCount === 1) setStartTime(Date.now());\n  }, [moveCount]);\n\n  const checkWin = () => {\n    if (JSON.stringify(arrayOfNumbers) === JSON.stringify([1, 2, 3, 4, 5, 6, 7, 8, 0])) {\n      setHandleGameTimeData({\n        isNowNeeded: true\n      });\n      alert(`Voila, You finished the game in ${moveCount} Moves!`);\n    }\n  };\n\n  checkWin();\n\n  const CreateBox = props => {\n    const className = props.item === 0 ? \"zeroBox\" : \"boxes\";\n    const content = props.item === 0 ? emptyBoxPosition === 8 ? \"\" : emptyBoxPosition + 1 : props.item;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: className,\n      onClick: () => swap(props.item),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"numberContent\",\n        children: [\" \", content, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this);\n  };\n\n  const swap = id => {\n    const boxToSwapWith = arrayOfNumbers.indexOf(id);\n    const checkColumnAdjacent = Math.abs(boxToSwapWith - emptyBoxPosition) === 3; // for columns\n\n    const checkRowAdjacentRight = boxToSwapWith - emptyBoxPosition === 1 && boxToSwapWith % 3 !== 0 ? true : false; // for row right\n\n    const checkRowAdjacentLeft = boxToSwapWith - emptyBoxPosition === -1 && boxToSwapWith % 3 !== 2 ? true : false; // for row left\n\n    if (checkColumnAdjacent || checkRowAdjacentLeft || checkRowAdjacentRight) {\n      let tempArray = arrayOfNumbers; // swap method\n\n      let temp = tempArray[boxToSwapWith];\n      tempArray[boxToSwapWith] = tempArray[emptyBoxPosition];\n      tempArray[emptyBoxPosition] = temp; //setting state\n\n      setEmptyBoxPosition(boxToSwapWith);\n      setMoveCount(moveCount + 1);\n      setArrayOfNumbers(tempArray);\n    }\n  }; // const receiveTime = (timeData) => {\n  //  setHandleGameTimeData({currentTime : timeData});\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"renderArea\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outerMainBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Moves - \", moveCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Time - \", /*#__PURE__*/_jsxDEV(TimeCount, {\n            startTime: StartTime,\n            sendTime: receiveTime,\n            status: handleGameTimeData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 23\n          }, this), \" Minutes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mainBox\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"boxWithBoxes\",\n          className: \"innerBox\",\n          children: arrayOfNumbers.map(number => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(CreateBox, {\n              item: number\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 62\n            }, this)\n          }, number, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 43\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          window.location.reload();\n        },\n        children: \" Shuffle \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TileGame, \"4GwNXY8nY+2nc4PLqZyjAd/dy98=\");\n\n_c = TileGame;\n\nconst TimeCount = props => {\n  _s2();\n\n  let [timeCount, setTimeCount] = useState(0);\n  if (timeCount === 0 && props.startTime !== 0) setInterval(() => {\n    setTimeCount(parseInt((Date.now() - props.startTime) / 1000));\n  }, 1000); // if(props.status.isNowNeeded) props.sendTime(timeCount);\n\n  let timeMinutes = `${timeCount / 60 < 10 ? '0' : ''}${parseInt(timeCount / 60)}`;\n  let timeSeconds = `${timeCount % 60 < 10 ? '0' : ''}${timeCount % 60}`;\n  return `${timeMinutes} : ${timeSeconds}`;\n};\n\n_s2(TimeCount, \"czooZey3VUYjxuHY71jYRkvQmj8=\");\n\n_c2 = TimeCount;\nexport default TileGame;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TileGame\");\n$RefreshReg$(_c2, \"TimeCount\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/tile-puzzle-second/src/tile-puzzle.js"],"names":["React","useEffect","useState","TileGame","shuffle","array","top","length","current","temp","parseInt","Math","random","arrayOfNumbers","setArrayOfNumbers","emptyBoxPosition","setEmptyBoxPosition","indexOf","moveCount","setMoveCount","StartTime","setStartTime","Date","now","checkWin","JSON","stringify","setHandleGameTimeData","isNowNeeded","alert","CreateBox","props","className","item","content","swap","id","boxToSwapWith","checkColumnAdjacent","abs","checkRowAdjacentRight","checkRowAdjacentLeft","tempArray","receiveTime","handleGameTimeData","map","number","window","location","reload","TimeCount","timeCount","setTimeCount","startTime","setInterval","timeMinutes","timeSeconds"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport \"./tile-puzzle.css\";\nfunction TileGame() {\n    const shuffle = () => {\n        let array = [0,1,2,3,4,5,6,7,8];\n        let top = array.length; \n        let current,temp;\n        while(--top) {\n          current = parseInt(Math.random() * (top+1));\n          temp = array[top];\n          array[top] = array[current];\n          array[current] = temp;\n        }\n        return array;\n      }\n  \n    let [arrayOfNumbers,setArrayOfNumbers] = useState([1,2,3,4,5,6,7,0,8]); \n    let [emptyBoxPosition,setEmptyBoxPosition] = useState(arrayOfNumbers.indexOf(0));\n    let [moveCount,setMoveCount] = useState(0);\n    let [StartTime,setStartTime] = useState(0);\n    // let [handleGameTimeData,setHandleGameTimeData] = useState({currentTime : 0, isNowNeeded : false});\n\n    useEffect(() =>  {\n      if(moveCount === 1) setStartTime(Date.now());\n    },[moveCount]);\n\n    const checkWin = () => {\n      if(JSON.stringify(arrayOfNumbers) === JSON.stringify([1,2,3,4,5,6,7,8,0])) {\n          setHandleGameTimeData({isNowNeeded : true});\n          alert(`Voila, You finished the game in ${moveCount} Moves!`);\n      }\n    }\n    checkWin();\n\n    const CreateBox = (props) => {\n        const className = (props.item === 0) ? \"zeroBox\" : \"boxes\" ;   \n        const content = (props.item === 0 ) ? (emptyBoxPosition === 8) ? \"\" : emptyBoxPosition + 1 : props.item;\n        return (\n            <div className={className} onClick={() => swap(props.item)}>\n               <div className=\"numberContent\"> {content} </div>\n           </div>\n        )\n    }\n\n    const swap = (id) => {\n\n      const boxToSwapWith = arrayOfNumbers.indexOf(id);\n\n      const checkColumnAdjacent = (Math.abs(boxToSwapWith - emptyBoxPosition) === 3);                                         // for columns\n      const checkRowAdjacentRight = ((boxToSwapWith - emptyBoxPosition === 1) && (boxToSwapWith%3 !== 0)) ?  true : false;    // for row right\n      const checkRowAdjacentLeft = ((boxToSwapWith - emptyBoxPosition === -1) && (boxToSwapWith%3 !== 2)) ? true : false;     // for row left\n\n      if(checkColumnAdjacent || checkRowAdjacentLeft || checkRowAdjacentRight) {\n        \n        let tempArray = arrayOfNumbers\n\n        // swap method\n        let temp = tempArray[boxToSwapWith];\n        tempArray[boxToSwapWith] = tempArray[emptyBoxPosition];\n        tempArray[emptyBoxPosition] = temp;\n        \n        //setting state\n        setEmptyBoxPosition(boxToSwapWith);\n        setMoveCount(moveCount + 1);\n        setArrayOfNumbers(tempArray); \n      }\n    }\n\n    // const receiveTime = (timeData) => {\n    //  setHandleGameTimeData({currentTime : timeData});\n    // }\n\n    return (\n    <div className=\"renderArea\">\n     <div className=\"outerMainBox\">\n      <div><h1>Moves - {moveCount}</h1></div> \n      <div><h1>Time - <TimeCount startTime = {StartTime} sendTime = {receiveTime} status={handleGameTimeData} /> Minutes</h1></div> \n      <div className=\"mainBox\" >\n        <div id=\"boxWithBoxes\" className=\"innerBox\">\n          {arrayOfNumbers.map((number) => <div key={number} ><CreateBox item={number} /></div>)}      \n        </div>\n      </div>\n    <button \n    onClick={() => { \n      window.location.reload();\n    }}\n    > Shuffle </button>\n    </div>\n   </div>\n  );\n}\n\nconst TimeCount = (props) => {\n  let [timeCount,setTimeCount] = useState(0);\n  if(timeCount === 0 && props.startTime !== 0) \n    setInterval(() => { \n      setTimeCount(parseInt((Date.now() - props.startTime)/1000)) \n    },1000);   \n    // if(props.status.isNowNeeded) props.sendTime(timeCount);\n\n  let timeMinutes = `${(timeCount/60 < 10) ? '0' : ''}${parseInt(timeCount/60)}`;\n  let timeSeconds =  `${(timeCount%60 < 10) ? '0' : ''}${timeCount%60}`;\n  return `${timeMinutes} : ${timeSeconds}` \n}\nexport default TileGame;"]},"metadata":{},"sourceType":"module"}