{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/tile-puzzle-second/src/tile-puzzle.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./tile-puzzle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TileGame() {\n  _s();\n\n  const shuffle = () => {\n    let array = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n    let top = array.length;\n    let current, temp;\n\n    while (--top) {\n      current = parseInt(Math.random() * (top + 1));\n      temp = array[top];\n      array[top] = array[current];\n      array[current] = temp;\n    }\n\n    return array;\n  };\n\n  let [arrayOfNumbers, setArrayOfNumbers] = useState(shuffle);\n  let [emptyBoxPosition, setEmptyBoxPosition] = useState(arrayOfNumbers.indexOf(0));\n  let [moveCount, setMoveCount] = useState(0);\n\n  const CreateBox = props => {\n    const className = props.item === 0 ? \"zeroBox\" : \"boxes\";\n    const content = props.item === 0 ? emptyBoxPosition + 1 : props.item;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: className,\n      id: props.item,\n      onClick: () => swap(props.item),\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  }; // const check = () => {\n  //   if((emptyBoxPosition%3 === 0 && (emptyBoxPosition-1)%3 === 2) || (emptyBoxPosition%3 === 2 && (emptyBoxPosition+1)%3 === 0)){\n  //     return false;\n  //   }\n  //   return true;\n  // }\n\n\n  const swap = id => {\n    const checkColumnAdjacent = Math.abs(arrayOfNumbers.indexOf(id) - emptyBoxPosition) === 3;\n    const checkRowAdjacentLeft = Math.abs(arrayOfNumbers.indexOf(id) - emptyBoxPosition) === 1 && (emptyBoxPosition - 1) % 3 !== 2;\n    const checkRowAdjacentRight = Math.abs(arrayOfNumbers.indexOf(id) - emptyBoxPosition) === 1 && (emptyBoxPosition + 1) % 3 !== 0;\n    console.log(emptyBoxPosition);\n    console.log(checkRowAdjacentLeft);\n    console.log(checkRowAdjacentRight);\n\n    if (checkColumnAdjacent || checkRowAdjacentLeft || checkRowAdjacentRight) {\n      let tempArray = arrayOfNumbers;\n      id = tempArray.indexOf(id);\n      let temp = tempArray[id];\n      tempArray[id] = tempArray[emptyBoxPosition];\n      tempArray[emptyBoxPosition] = temp;\n      setArrayOfNumbers(tempArray);\n      setEmptyBoxPosition(id);\n      setMoveCount(moveCount + 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"renderArea\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Moves : \", moveCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainBox\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"boxWithBoxes\",\n        className: \"innerBox\",\n        children: arrayOfNumbers.map(number => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(CreateBox, {\n            item: number\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 68\n          }, this)\n        }, number, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 49\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TileGame, \"6glUz3PX7zc0SJzn5T9W8DzrCfQ=\");\n\n_c = TileGame;\nexport default TileGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"TileGame\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/tile-puzzle-second/src/tile-puzzle.js"],"names":["React","useState","TileGame","shuffle","array","top","length","current","temp","parseInt","Math","random","arrayOfNumbers","setArrayOfNumbers","emptyBoxPosition","setEmptyBoxPosition","indexOf","moveCount","setMoveCount","CreateBox","props","className","item","content","swap","id","checkColumnAdjacent","abs","checkRowAdjacentLeft","checkRowAdjacentRight","console","log","tempArray","map","number"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport \"./tile-puzzle.css\";\nfunction TileGame() {\n    const shuffle = () => {\n        let array = [0,1,2,3,4,5,6,7,8];\n        let top = array.length; \n        let current,temp;\n        while(--top) {\n          current = parseInt(Math.random() * (top+1));\n          temp = array[top];\n          array[top] = array[current];\n          array[current] = temp;\n        }\n        return array;\n      }\n  \n    let [arrayOfNumbers,setArrayOfNumbers] = useState(shuffle); \n    let [emptyBoxPosition,setEmptyBoxPosition] = useState(arrayOfNumbers.indexOf(0));\n    let [moveCount,setMoveCount] = useState(0);\n\n    const CreateBox = (props) => {\n        const className = (props.item === 0) ? \"zeroBox\" : \"boxes\" ;   \n        const content = (props.item === 0 ) ? emptyBoxPosition + 1 : props.item;\n        return(\n            <div className={className} id={props.item}  onClick={() => swap(props.item)}>\n               {content}\n           </div>\n        )\n    }\n\n      // const check = () => {\n      //   if((emptyBoxPosition%3 === 0 && (emptyBoxPosition-1)%3 === 2) || (emptyBoxPosition%3 === 2 && (emptyBoxPosition+1)%3 === 0)){\n      //     return false;\n      //   }\n      //   return true;\n      // }\n\n    const swap = (id) => {\n      const checkColumnAdjacent = (Math.abs(arrayOfNumbers.indexOf(id) - emptyBoxPosition) === 3);\n      const checkRowAdjacentLeft = (((Math.abs(arrayOfNumbers.indexOf(id) - emptyBoxPosition) === 1) && (emptyBoxPosition-1)%3 !== 2));\n      const checkRowAdjacentRight = (((Math.abs(arrayOfNumbers.indexOf(id) - emptyBoxPosition) === 1) && (emptyBoxPosition+1)%3 !== 0));\n      console.log(emptyBoxPosition);\n      console.log(checkRowAdjacentLeft);\n      console.log(checkRowAdjacentRight);\n      \n\n      if(checkColumnAdjacent || checkRowAdjacentLeft || checkRowAdjacentRight) {\n        \n        let tempArray = arrayOfNumbers;\n        id = tempArray.indexOf(id);\n        let temp = tempArray[id];\n        tempArray[id] = tempArray[emptyBoxPosition];\n        tempArray[emptyBoxPosition] = temp;\n        \n        setArrayOfNumbers(tempArray);\n        setEmptyBoxPosition(id);\n        setMoveCount(moveCount + 1);\n      }\n    }\n\n    return (\n    <div className=\"renderArea\">\n      <h1>Moves : {moveCount}</h1>\n        <div className=\"mainBox\">\n            <div id=\"boxWithBoxes\" className=\"innerBox\">\n                {arrayOfNumbers.map((number) => <div key={number} ><CreateBox item={number} /></div>)}             \n            </div>\n        </div>\n    </div>\n  );\n\n}\n\nexport default TileGame;"]},"metadata":{},"sourceType":"module"}