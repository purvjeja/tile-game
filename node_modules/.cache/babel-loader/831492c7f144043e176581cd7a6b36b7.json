{"ast":null,"code":"var _jsxFileName = \"/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/tile-puzzle-second/src/tile-puzzle.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./tile-puzzle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TileGame() {\n  _s();\n\n  const shuffle = () => {\n    let array = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n    let top = array.length;\n    let current, temp;\n\n    while (--top) {\n      current = parseInt(Math.random() * (top + 1));\n      temp = array[top];\n      array[top] = array[current];\n      array[current] = temp;\n    }\n\n    return array;\n  };\n\n  let [arrayOfNumber] = useState(shuffle);\n\n  const CreateBox = props => {\n    console.log(props.item);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: props.item\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"renderArea\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainBox\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"boxWithBoxes\",\n        className: \"innerBox\",\n        children: arrayOfNumber.map((number, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(CreateBox, {\n            item: number\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 59\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 54\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TileGame, \"VXKwz6DsdfZ7nrb8RHc/JYKRKjc=\");\n\n_c = TileGame;\nexport default TileGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"TileGame\");","map":{"version":3,"sources":["/home/purvj/Documents/github-repositories/javascript-practice/REACT JS/tile-puzzle-second/src/tile-puzzle.js"],"names":["React","useState","TileGame","shuffle","array","top","length","current","temp","parseInt","Math","random","arrayOfNumber","CreateBox","props","console","log","item","map","number","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,mBAAP;;;AACA,SAASC,QAAT,GAAoB;AAAA;;AAChB,QAAMC,OAAO,GAAG,MAAM;AAClB,QAAIC,KAAK,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,CAAZ;AACA,QAAIC,GAAG,GAAGD,KAAK,CAACE,MAAhB;AACA,QAAIC,OAAJ,EAAYC,IAAZ;;AACA,WAAM,EAAEH,GAAR,EAAa;AACXE,MAAAA,OAAO,GAAGE,QAAQ,CAACC,IAAI,CAACC,MAAL,MAAiBN,GAAG,GAAC,CAArB,CAAD,CAAlB;AACAG,MAAAA,IAAI,GAAGJ,KAAK,CAACC,GAAD,CAAZ;AACAD,MAAAA,KAAK,CAACC,GAAD,CAAL,GAAaD,KAAK,CAACG,OAAD,CAAlB;AACAH,MAAAA,KAAK,CAACG,OAAD,CAAL,GAAiBC,IAAjB;AACD;;AACD,WAAOJ,KAAP;AACD,GAXH;;AAaA,MAAI,CAACQ,aAAD,IAAkBX,QAAQ,CAACE,OAAD,CAA9B;;AAEA,QAAMU,SAAS,GAAIC,KAAD,IAAW;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,IAAlB;AACA,wBACG;AAAA,gBAAMH,KAAK,CAACG;AAAZ;AAAA;AAAA;AAAA;AAAA,YADH;AAGH,GALD;;AAOA,sBACA;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACI;AAAK,QAAA,EAAE,EAAC,cAAR;AAAuB,QAAA,SAAS,EAAC,UAAjC;AAAA,kBACKL,aAAa,CAACM,GAAd,CAAkB,CAACC,MAAD,EAAQC,KAAR,kBAAkB;AAAA,iCAAK,QAAC,SAAD;AAAuB,YAAA,IAAI,EAAED;AAA7B,aAAgBC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,gBAApC;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADA;AAUH;;GAjCQlB,Q;;KAAAA,Q;AAmCT,eAAeA,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport \"./tile-puzzle.css\";\nfunction TileGame() {\n    const shuffle = () => {\n        let array = [0,1,2,3,4,5,6,7,8];\n        let top = array.length; \n        let current,temp;\n        while(--top) {\n          current = parseInt(Math.random() * (top+1));\n          temp = array[top];\n          array[top] = array[current];\n          array[current] = temp;\n        }\n        return array;\n      }\n  \n    let [arrayOfNumber] = useState(shuffle); \n\n    const CreateBox = (props) => {\n        console.log(props.item);\n        return(\n           <div>{props.item}</div>\n        )\n    }\n\n    return (\n    <div className=\"renderArea\">\n        <div className=\"mainBox\">\n            <div id=\"boxWithBoxes\" className=\"innerBox\">\n                {arrayOfNumber.map((number,index) => <div><CreateBox key={index} item={number} /></div>)}             \n            </div>\n        </div>\n    </div>\n  );\n\n}\n\nexport default TileGame;\n"]},"metadata":{},"sourceType":"module"}