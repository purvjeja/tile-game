{"version":3,"sources":["tilepuzzle.js","index.js"],"names":["tilepuzzle","props","state","matrix","createRandomMatrix","MoveCount","userName","tmp","current","array","top","parseInt","Math","random","twoDArray","i","push","Name","prompt","alert","window","location","reload","this","setState","DisplayBoxes","addEventListnerToBoxes","checkResult","document","getElementById","innerHTML","JSON","stringify","setTimeout","j","createBox","id","element","createElement","className","innerText","append","flag","setRight","setLeft","setTop","setDown","addEventListener","swapWithEmpty","emptyCoordinateRow","emptyCoordinateColumn","row","column","currentMatrix","temp","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.2712561e.chunk.js","sourcesContent":["import {Component} from 'react';\nimport './tilepuzzle.css';\n\nclass tilepuzzle extends Component{ \n    constructor(props){\n        super(props);\n        this.state = {\n            matrix : this.createRandomMatrix(),\n            // matrix :  [[1,2,3],[4,5,6],[7,0,8]],\n            // coordinatesOfEmpty : []\n            MoveCount : 0,\n            userName : \"\"\n        }\n    }\n\n    createRandomMatrix(){\n        let array = [0,1,2,3,4,5,6,7,8];\n        let tmp, current, top = 9;\n        while(--top) {\n            current = parseInt(Math.random() * (top + 1));\n            tmp = array[current];\n            array[current] = array[top];\n            array[top] = tmp;\n        }\n\n        let twoDArray = [];\n        for(let i = 0 ; i < 9 ; i+=3) {\n            twoDArray.push([array[i],array[i+1],array[i+2]]);\n        } \n      return twoDArray;\n    }\n\n\n    componentDidMount(){\n        const Name = prompt(\"Hey, What's Your Name?\");\n        if(!Name){ \n            alert(\"Empty Name!\");\n            window.location.reload();\n        }\n        this.setState({\n            userName : Name\n        });\n        alert(\"Hey \"+ Name +\", Just relax and try to solve this puzzle :) \");\n        // this.settingEmptyCoordinates();\n        this.DisplayBoxes();\n        this.addEventListnerToBoxes();\n    }\n    // settingEmptyCoordinates(){\n        // let matrix = this.state.matrix;\n        // let i,j,flag=0;\n        // for(i = 0 ; i <= 2 ; i++){\n        //     for(j = 0 ; j <= 2 ; j++){ \n        //         if(matrix[i][j] === 0) { \n        //             flag=1;\n        //             break;\n        //         }\n        //     }\n        //     if(flag === 1) break;\n        // }\n        // this.setState({\n    //         coordinatesOfEmpty : [i,j]\n    //     });\n    // }\n\n    componentDidUpdate(){\n        this.checkResult();\n        document.getElementById('boxWithBoxes').innerHTML = \"\";\n        this.DisplayBoxes();    \n        this.addEventListnerToBoxes();\n    }\n\n    checkResult(){\n\n        if(JSON.stringify(this.state.matrix) === JSON.stringify([[1,2,3],[4,5,6],[7,8,0]])) {\n            alert(\"Voila \" +this.state.userName + \",You have completed the puzzle in \" + this.state.MoveCount + \" moves :)\");\n            setTimeout(() => window.location.reload(),20000);\n        }\n    }\n\n    DisplayBoxes(){\n        // console.log(this.state.matrix);\n        let matrix = this.state.matrix;\n        for(let i of matrix) {\n            for(let j of i) { \n                this.createBox(j);        \n            }\n        }\n    }\n\n    createBox(id){\n        let element = document.createElement('div');\n        element.id = id;\n        element.className = (id === 0 )? \"emptyBox\" : \"boxes\";\n        element.innerText = (id === 0)? \"\" : id;\n        document.getElementById('boxWithBoxes').append(element);\n    }\n\n    addEventListnerToBoxes(){\n        let matrix = this.state.matrix;\n        let i,j,flag=0;\n        for(i = 0 ; i <= 2 ; i++){\n            for(j = 0 ; j <= 2 ; j++){ \n                if(matrix[i][j] === 0) { \n                    flag=1;\n                    break;\n                }\n            }\n            if(flag === 1) break;\n        }\n    \n\n        // let [i,j] = [this.state.coordinatesOfEmpty[0],this.state.coordinatesOfEmpty[1]];\n        \n        this.setRight(i,j);\n        this.setLeft(i,j);\n        this.setTop(i,j);\n        this.setDown(i,j);\n    }\n\n    setRight(i,j) {\n        if(j === 2) return;\n        j+=1;\n        // console.log(\"right : \" + i +\" , \" + j);\n        let id = this.state.matrix[i][j];\n        document.getElementById(id).addEventListener('click',() => this.swapWithEmpty(i,j-1,i,j));\n    }\n\n    setLeft(i,j) {\n        if(j === 0) return;\n        j-=1;\n        // console.log(\"left :\" + i + \" , \" + j);\n        let id = this.state.matrix[i][j];\n        document.getElementById(id).addEventListener('click',() => this.swapWithEmpty(i,j+1,i,j));\n    }\n\n    setDown(i,j) {\n        if(i === 2) return;\n        i+=1;\n        // console.log(\"down : \" + i +\" , \" + j);\n        let id = this.state.matrix[i][j];\n        document.getElementById(id).addEventListener('click',() => this.swapWithEmpty(i-1,j,i,j));\n    }\n    setTop(i,j) {\n        if(i === 0) return;\n        i-=1;\n        // console.log(\"top : \" + i +\" , \" + j);\n        let id = this.state.matrix[i][j];\n        document.getElementById(id).addEventListener('click',() => this.swapWithEmpty(i+1,j,i,j));\n    }\n\n    swapWithEmpty(emptyCoordinateRow,emptyCoordinateColumn,row,column) {\n        let currentMatrix = this.state.matrix;\n        let temp = currentMatrix[row][column];\n        currentMatrix[row][column] = currentMatrix[emptyCoordinateRow][emptyCoordinateColumn];\n        currentMatrix[emptyCoordinateRow][emptyCoordinateColumn] = temp;\n\n        this.setState({\n            matrix : currentMatrix,\n            // coordinatesOfEmpty : [row,column]\n            MoveCount : this.state.MoveCount+1,\n        });\n    }\n    \n    render(){\n        return(\n        <div>\n            <div className=\"GameComponents\">\n                <div className=\"heading\">\n                    <h1>3 X 3 Tile Puzzle Game</h1>\n                    <div className=\"gameDatas\">\n                        <h2>Moves : {this.state.MoveCount}</h2>\n                    </div>\n                </div>\n                <div className=\"mainBox\">\n                    <div id=\"boxWithBoxes\" className=\"innerBox\">\n                    </div>\n                </div>\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default tilepuzzle;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Tilegame from './tilepuzzle';\n\nReactDOM.render(\n    <Tilegame />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}