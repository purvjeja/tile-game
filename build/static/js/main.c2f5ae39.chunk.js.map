{"version":3,"sources":["tile-puzzle.js","index.js"],"names":["TimeCount","props","useState","timeCount","setTimeCount","timeShownStatus","setTimeShowStatus","startTime","setInterval","parseInt","Date","now","timeMinutes","timeSeconds","status","sendTime","m","s","TileGame","current","temp","array","top","length","Math","random","arrayOfNumbers","setArrayOfNumbers","indexOf","emptyBoxPosition","setEmptyBoxPosition","moveCount","setMoveCount","StartTime","setStartTime","handleGameTimeData","setHandleGameTimeData","useEffect","JSON","stringify","alert","CreateBox","className","item","content","onClick","swap","id","boxToSwapWith","abs","tempArray","timeData","window","location","reload","map","number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c2f5ae39.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport \"./tile-puzzle.css\";\nfunction TileGame() {\n    const shuffle = () => {\n        let array = [0,1,2,3,4,5,6,7,8];\n        let top = array.length; \n        let current,temp;\n        while(--top) {\n          current = parseInt(Math.random() * (top+1));\n          temp = array[top];\n          array[top] = array[current];\n          array[current] = temp;\n        }\n        return array;\n      }\n  \n    let [arrayOfNumbers,setArrayOfNumbers] = useState(shuffle); \n    let [emptyBoxPosition,setEmptyBoxPosition] = useState(arrayOfNumbers.indexOf(0));\n    let [moveCount,setMoveCount] = useState(0);\n    let [StartTime,setStartTime] = useState(0);\n    let [handleGameTimeData,setHandleGameTimeData] = useState(false);\n\n    useEffect(() =>  {\n      if(moveCount === 1) setStartTime(Date.now());\n      if(JSON.stringify(arrayOfNumbers) === JSON.stringify([1,2,3,4,5,6,7,8,0])) {\n        alert(`Voila, You finished the game!`);\n        if(!(handleGameTimeData)) setHandleGameTimeData(true);\n       }  \n       // eslint-disable-next-line\n      },[moveCount,arrayOfNumbers]\n    );\n\n    const CreateBox = (props) => {\n        const className = (props.item === 0) ? \"zeroBox\" : \"boxes\" ;   \n        const content = (props.item === 0 ) ? (emptyBoxPosition === 8) ? \"\" : emptyBoxPosition + 1 : props.item;\n        return (\n            <div className={className} onClick={() => swap(props.item)}>\n               <div className=\"numberContent\"> {content} </div>\n           </div>\n        )\n    }\n\n    const swap = (id) => {\n\n      const boxToSwapWith = arrayOfNumbers.indexOf(id);\n\n      const checkColumnAdjacent = (Math.abs(boxToSwapWith - emptyBoxPosition) === 3);                                         // for columns\n      const checkRowAdjacentRight = ((boxToSwapWith - emptyBoxPosition === 1) && (boxToSwapWith%3 !== 0)) ?  true : false;    // for row right\n      const checkRowAdjacentLeft = ((boxToSwapWith - emptyBoxPosition === -1) && (boxToSwapWith%3 !== 2)) ? true : false;     // for row left\n\n      if(checkColumnAdjacent || checkRowAdjacentLeft || checkRowAdjacentRight) {\n        \n        let tempArray = arrayOfNumbers\n\n        // swap method\n        let temp = tempArray[boxToSwapWith];\n        tempArray[boxToSwapWith] = tempArray[emptyBoxPosition];\n        tempArray[emptyBoxPosition] = temp;\n        \n        //setting state\n        setEmptyBoxPosition(boxToSwapWith);\n        setMoveCount(moveCount + 1);\n        setArrayOfNumbers(tempArray); \n      }\n    }\n\n    const receiveTime = (timeData) => {\n      alert(`Completed in ${timeData.m} Minutes : ${timeData.s} Seconds and in ${moveCount} Moves!`);\n      window.location.reload();\n    }\n\n    return (\n    <div className=\"renderArea\">\n     <div className=\"outerMainBox\">\n      <div><h1>Moves - {moveCount}</h1></div> \n      <div><h2>Time - <TimeCount startTime = {StartTime} sendTime = {receiveTime} status={handleGameTimeData} /></h2></div> \n      <div className=\"mainBox\" >\n        <div id=\"boxWithBoxes\" className=\"innerBox\">\n          {arrayOfNumbers.map((number) => <div key={number} ><CreateBox item={number} /></div>)}      \n        </div>\n      </div>\n    <button \n    onClick={() => { \n      window.location.reload();\n    }}\n    > Shuffle </button>\n    </div>\n   </div>\n  );\n}\n\nconst TimeCount = (props) => {\n  let [timeCount,setTimeCount] = useState(0);\n  let [timeShownStatus,setTimeShowStatus] = useState(false); \n  if(timeCount === 0 && props.startTime !== 0) \n    setInterval(() => { \n      setTimeCount(parseInt((Date.now() - props.startTime)/1000)) \n    },1000);   \n    \n  let timeMinutes = `${(timeCount/60 < 10) ? '0' : ''}${parseInt(timeCount/60)}`;\n  let timeSeconds =  `${(timeCount%60 < 10) ? '0' : ''}${timeCount%60}`;\n  if(props.status && !(timeShownStatus)) { \n    props.sendTime({m : timeMinutes, s : timeSeconds}); \n    setTimeShowStatus(!timeShownStatus);\n  }\n  \n  return `${timeMinutes} Min : ${timeSeconds} Sec` \n}\nexport default TileGame;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TileGame from './tile-puzzle';\n\nReactDOM.render(\n    <TileGame />,\n  document.getElementById('root')\n);"],"sourceRoot":""}